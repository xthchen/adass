#excluding options where no haplotypes are selected or all haplotypes are selected
i = 1
while (any(c(0,nhap) == sum(haplotype[samp_route[i],]))){
i = i+1
}
benef_all = samp_route[i]
}
num_sel_hap = sum(haplotype[benef_all,])
s[benef_all] = runif(n_benef,min,max)
s_final = append(s_final,list(s))
benef_all_final = append(benef_all_final, list(benef_all))
}
if (diff_sel_str == FALSE){
# exact replicate
s_final = rep(list(s_final[[1]]), repli)
benef_all_final = rep(list(benef_all_final[[1]]), repli)
} else {
s_int = rep(list(rep(0,nsnp)), repli)
for (i in 1:repli){
s_int[[i]][benef_all_final[[1]]] = s_final[[i]][benef_all_final[[i]]]
}
s_final = s_int
benef_all_final = rep(list(benef_all_final[[1]]), repli)
}
}
if (n_benef == 0){
benef_all_final = NULL
s_final = NULL
num_sel_hap = 0
}
return(list(s_final,benef_all_final,num_sel_hap))
}
##########################with replicate scenario###############################
subset_sel = c()
for (i in 1:300){
set.seed(i^2)
print(i)
subset_itr = c()
True_hap <- readRDS("/Users/hchen/Dropbox/Haplotype_test/True_hap.rds")
True_hap = True_hap[,sample.int(180,10)]
while (!any(rowSums(True_hap)==2)){
True_hap = True_hap[,sample(1:180,10)]
}
repli = 3
benef = benef_sim(True_hap, n_benef = 1, min = 0.05, max = 0.05, fix_sel = 2, repli = repli)
hap_freq = Frequency_sim(True_hap, t = 6, tdelta = 10, benef, rand_start = FALSE,
Ne = 500, repli = repli)
snp_freq = True_hap %*% hap_freq[[1]]
#allele frequency matrix
p_val = adapted.cmh.test(snp_freq,matrix(100000, nrow = nrow(snp_freq), ncol = ncol(snp_freq)),
Ne = rep(500,repli), gen = seq(0,60,10), IntGen = TRUE, repl = 1:repli)
#adapted chi square test
mp_val = p.adjust(p_val, method = "BH")
#multiple testing adjustment
mp_pos = which(mp_val < 0.05)
#position of potentially selected SNP
subset_itr = c(subset_itr, length(mp_pos))
subset_itr = c(subset_itr, (benef[[2]][[1]] %in% mp_pos))
snp_freq = snp_freq[mp_pos,]
snp_freq_diff = c()
for (j in 1:repli){
snp_freq_diff = cbind(snp_freq_diff, (snp_freq[,j*7] - snp_freq[,(j-1)*7+1]))
}
#frequency difference
mean_all = rowSums(snp_freq_diff)/repli
#means
df = (repli-1)*nrow(snp_freq_diff)
var = sum((snp_freq_diff - mean_all)^2)/df
#assuming equal variance across SNPs (not true)
#var = rowSums((snp_freq_diff - mean_all)^2)/(repli-1)
#assuming unequal variance across SNPs
###########non-adaptive method##############
integrand = function(arg){
u = arg[1]
x = arg[2]
pnorm(d*u+x)^(nrow(snp_freq_diff)-1)*dnorm(x)*dchi(u*sqrt(df),df)*sqrt(df)
}
statistic = (max(mean_all) - mean_all)*sqrt(nrow(snp_freq_diff))/sqrt(var)
R = c()
for (d in statistic){
R = c(R, 1-pcubature(integrand, lowerLimit = c(0,-Inf), upperLimit = c(Inf, Inf))$integral)
}
subset_itr = c(subset_itr, length(R[R>0.05]))
subset_itr = c(subset_itr, (benef[[2]][[1]] %in% mp_pos[R>0.05]))
############adaptive method###############
k_h = AS(R, 0.5)
df_h = (repli-1)*k_h
integrand_h = function(arg){
u = arg[1]
x = arg[2]
pnorm(d*u+x)^(k_h-1)*dnorm(x)*dchi(u*sqrt(df_h),df_h)*sqrt(df_h)
}
R_h = c()
for (d in statistic){
R_h = c(R_h, 1-pcubature(integrand_h, lowerLimit = c(0,-Inf), upperLimit = c(Inf, Inf))$integral)
}
subset_itr = c(subset_itr, length(R_h[R_h>0.05]))
subset_itr = c(subset_itr, benef[[2]][[1]] %in% mp_pos[R_h>0.05])
############RAS#######################################
k_h = RAS(R, 0.5)
df_h = (repli-1)*k_h
integrand_h = function(arg){
u = arg[1]
x = arg[2]
pnorm(d*u+x)^(k_h-1)*dnorm(x)*dchi(u*sqrt(df_h),df_h)*sqrt(df_h)
}
R_h = c()
for (d in statistic){
R_h = c(R_h, 1-pcubature(integrand_h, lowerLimit = c(0,-Inf), upperLimit = c(Inf, Inf))$integral)
}
subset_itr = c(subset_itr, length(R_h[R_h>0.05]))
subset_itr = c(subset_itr, benef[[2]][[1]] %in% mp_pos[R_h>0.05])
subset_sel = rbind(subset_sel, subset_itr)
}
Frequency_sim = function(haplotype, t = 6, tdelta = 10, benef_sim, rand_start = FALSE,
Ne = 500, sel_dec = FALSE, dec_strength = 0.7, dec_ne = 0, repli = 1){
nhap = ncol(haplotype)
s = benef_sim[[1]]
benef_all = benef_sim[[2]]
freq_matrix = matrix(NA, ncol= (t+1)*repli, nrow = nhap)
#frequency matrix initialisation
if (rand_start == TRUE){
time_0 = runif(nhap,0,1)
time_0 = time_0/sum(time_0)
}else{
time_0 = rep(1/nhap, nhap)
}
#initialisation of haplotype frequencies at time 0
for (i in 1:repli){
freq_matrix[,1 + (i-1)*(t+1)] = time_0
}
#record frequency at time 0 into matrix
timepoints = seq(0,t*tdelta,tdelta)
#timepoints of interests
total_fitness = c()
for (k in 1:repli){
fitness = rep(1,nhap)
#initialisation for fitness, set all to 1
if (length(s) == 0){
fitness = fitness
}
else {
#apply selection if there are more than one selection required
for (i in 1:nhap){
#loop through all haplotypes
if (sum(haplotype[benef_all[[k]], i]) > 0){
#if not all benef_all rows at column i are 0
fitness[i] = fitness[i]+sum(s[[k]][benef_all[[k]]][as.logical(haplotype[benef_all[[k]],i])])
#fitness of haplotype i = sum(wA[benef_all]) only if hp_str[benef_all,i] = 1
#else = 0
#basically a sum of selections for each haplotype
}
}
}
freq = time_0
#frequency initialisation
ti = 1
#current generation
while(ti <= t*tdelta){
if (length(s) > 0){
freq = freq*fitness
}
# apply drift
if (any(!is.na(Ne))){
#as long as effective population size is present
freq = rmultinom(1, Ne, freq)/Ne}
#frequency follows a multinomial distribution
if (ti %in% timepoints){
freq_matrix[,(ti/tdelta+1)+(t+1)*(k-1)] = freq
if (sel_dec == TRUE){
fitness = 1 + (fitness - 1)*dec_strength
}
}
ti = ti + 1
Ne = Ne - dec_ne
}
total_fitness = rbind(total_fitness, fitness)
}
return(list(freq_matrix, total_fitness))
}
##########################with replicate scenario###############################
subset_sel = c()
for (i in 1:300){
set.seed(i^2)
print(i)
subset_itr = c()
True_hap <- readRDS("/Users/hchen/Dropbox/Haplotype_test/True_hap.rds")
True_hap = True_hap[,sample.int(180,10)]
while (!any(rowSums(True_hap)==2)){
True_hap = True_hap[,sample(1:180,10)]
}
repli = 3
benef = benef_sim(True_hap, n_benef = 1, min = 0.05, max = 0.05, fix_sel = 2, repli = repli)
hap_freq = Frequency_sim(True_hap, t = 6, tdelta = 10, benef, rand_start = FALSE,
Ne = 500, repli = repli)
snp_freq = True_hap %*% hap_freq[[1]]
#allele frequency matrix
p_val = adapted.cmh.test(snp_freq,matrix(100000, nrow = nrow(snp_freq), ncol = ncol(snp_freq)),
Ne = rep(500,repli), gen = seq(0,60,10), IntGen = TRUE, repl = 1:repli)
#adapted chi square test
mp_val = p.adjust(p_val, method = "BH")
#multiple testing adjustment
mp_pos = which(mp_val < 0.05)
#position of potentially selected SNP
subset_itr = c(subset_itr, length(mp_pos))
subset_itr = c(subset_itr, (benef[[2]][[1]] %in% mp_pos))
snp_freq = snp_freq[mp_pos,]
snp_freq_diff = c()
for (j in 1:repli){
snp_freq_diff = cbind(snp_freq_diff, (snp_freq[,j*7] - snp_freq[,(j-1)*7+1]))
}
#frequency difference
mean_all = rowSums(snp_freq_diff)/repli
#means
df = (repli-1)*nrow(snp_freq_diff)
var = sum((snp_freq_diff - mean_all)^2)/df
#assuming equal variance across SNPs (not true)
#var = rowSums((snp_freq_diff - mean_all)^2)/(repli-1)
#assuming unequal variance across SNPs
###########non-adaptive method##############
integrand = function(arg){
u = arg[1]
x = arg[2]
pnorm(d*u+x)^(nrow(snp_freq_diff)-1)*dnorm(x)*dchi(u*sqrt(df),df)*sqrt(df)
}
statistic = (max(mean_all) - mean_all)*sqrt(nrow(snp_freq_diff))/sqrt(var)
R = c()
for (d in statistic){
R = c(R, 1-pcubature(integrand, lowerLimit = c(0,-Inf), upperLimit = c(Inf, Inf))$integral)
}
subset_itr = c(subset_itr, length(R[R>0.05]))
subset_itr = c(subset_itr, (benef[[2]][[1]] %in% mp_pos[R>0.05]))
############adaptive method###############
k_h = AS(R, 0.5)
df_h = (repli-1)*k_h
integrand_h = function(arg){
u = arg[1]
x = arg[2]
pnorm(d*u+x)^(k_h-1)*dnorm(x)*dchi(u*sqrt(df_h),df_h)*sqrt(df_h)
}
R_h = c()
for (d in statistic){
R_h = c(R_h, 1-pcubature(integrand_h, lowerLimit = c(0,-Inf), upperLimit = c(Inf, Inf))$integral)
}
subset_itr = c(subset_itr, length(R_h[R_h>0.05]))
subset_itr = c(subset_itr, benef[[2]][[1]] %in% mp_pos[R_h>0.05])
############RAS#######################################
k_h = RAS(R, 0.5)
df_h = (repli-1)*k_h
integrand_h = function(arg){
u = arg[1]
x = arg[2]
pnorm(d*u+x)^(k_h-1)*dnorm(x)*dchi(u*sqrt(df_h),df_h)*sqrt(df_h)
}
R_h = c()
for (d in statistic){
R_h = c(R_h, 1-pcubature(integrand_h, lowerLimit = c(0,-Inf), upperLimit = c(Inf, Inf))$integral)
}
subset_itr = c(subset_itr, length(R_h[R_h>0.05]))
subset_itr = c(subset_itr, benef[[2]][[1]] %in% mp_pos[R_h>0.05])
subset_sel = rbind(subset_sel, subset_itr)
}
library("ACER")
##########################with replicate scenario###############################
subset_sel = c()
for (i in 1:300){
set.seed(i^2)
print(i)
subset_itr = c()
True_hap <- readRDS("/Users/hchen/Dropbox/Haplotype_test/True_hap.rds")
True_hap = True_hap[,sample.int(180,10)]
while (!any(rowSums(True_hap)==2)){
True_hap = True_hap[,sample(1:180,10)]
}
repli = 3
benef = benef_sim(True_hap, n_benef = 1, min = 0.05, max = 0.05, fix_sel = 2, repli = repli)
hap_freq = Frequency_sim(True_hap, t = 6, tdelta = 10, benef, rand_start = FALSE,
Ne = 500, repli = repli)
snp_freq = True_hap %*% hap_freq[[1]]
#allele frequency matrix
p_val = adapted.cmh.test(snp_freq,matrix(100000, nrow = nrow(snp_freq), ncol = ncol(snp_freq)),
Ne = rep(500,repli), gen = seq(0,60,10), IntGen = TRUE, repl = 1:repli)
#adapted chi square test
mp_val = p.adjust(p_val, method = "BH")
#multiple testing adjustment
mp_pos = which(mp_val < 0.05)
#position of potentially selected SNP
subset_itr = c(subset_itr, length(mp_pos))
subset_itr = c(subset_itr, (benef[[2]][[1]] %in% mp_pos))
snp_freq = snp_freq[mp_pos,]
snp_freq_diff = c()
for (j in 1:repli){
snp_freq_diff = cbind(snp_freq_diff, (snp_freq[,j*7] - snp_freq[,(j-1)*7+1]))
}
#frequency difference
mean_all = rowSums(snp_freq_diff)/repli
#means
df = (repli-1)*nrow(snp_freq_diff)
var = sum((snp_freq_diff - mean_all)^2)/df
#assuming equal variance across SNPs (not true)
#var = rowSums((snp_freq_diff - mean_all)^2)/(repli-1)
#assuming unequal variance across SNPs
###########non-adaptive method##############
integrand = function(arg){
u = arg[1]
x = arg[2]
pnorm(d*u+x)^(nrow(snp_freq_diff)-1)*dnorm(x)*dchi(u*sqrt(df),df)*sqrt(df)
}
statistic = (max(mean_all) - mean_all)*sqrt(nrow(snp_freq_diff))/sqrt(var)
R = c()
for (d in statistic){
R = c(R, 1-pcubature(integrand, lowerLimit = c(0,-Inf), upperLimit = c(Inf, Inf))$integral)
}
subset_itr = c(subset_itr, length(R[R>0.05]))
subset_itr = c(subset_itr, (benef[[2]][[1]] %in% mp_pos[R>0.05]))
############adaptive method###############
k_h = AS(R, 0.5)
df_h = (repli-1)*k_h
integrand_h = function(arg){
u = arg[1]
x = arg[2]
pnorm(d*u+x)^(k_h-1)*dnorm(x)*dchi(u*sqrt(df_h),df_h)*sqrt(df_h)
}
R_h = c()
for (d in statistic){
R_h = c(R_h, 1-pcubature(integrand_h, lowerLimit = c(0,-Inf), upperLimit = c(Inf, Inf))$integral)
}
subset_itr = c(subset_itr, length(R_h[R_h>0.05]))
subset_itr = c(subset_itr, benef[[2]][[1]] %in% mp_pos[R_h>0.05])
############RAS#######################################
k_h = RAS(R, 0.5)
df_h = (repli-1)*k_h
integrand_h = function(arg){
u = arg[1]
x = arg[2]
pnorm(d*u+x)^(k_h-1)*dnorm(x)*dchi(u*sqrt(df_h),df_h)*sqrt(df_h)
}
R_h = c()
for (d in statistic){
R_h = c(R_h, 1-pcubature(integrand_h, lowerLimit = c(0,-Inf), upperLimit = c(Inf, Inf))$integral)
}
subset_itr = c(subset_itr, length(R_h[R_h>0.05]))
subset_itr = c(subset_itr, benef[[2]][[1]] %in% mp_pos[R_h>0.05])
subset_sel = rbind(subset_sel, subset_itr)
}
##########################with replicate scenario###############################
subset_sel = c()
for (i in 1:300){
set.seed(i^2)
print(i)
subset_itr = c()
True_hap <- readRDS("/Users/hchen/Dropbox/Haplotype_test/True_hap.rds")
True_hap = True_hap[,sample.int(180,10)]
while (!any(rowSums(True_hap)==2)){
True_hap = True_hap[,sample(1:180,10)]
}
repli = 3
benef = benef_sim(True_hap, n_benef = 1, min = 0.05, max = 0.05, fix_sel = 2, repli = repli)
hap_freq = Frequency_sim(True_hap, t = 6, tdelta = 10, benef, rand_start = FALSE,
Ne = 500, repli = repli)
snp_freq = True_hap %*% hap_freq[[1]]
#allele frequency matrix
p_val = adapted.cmh.test(snp_freq,matrix(100000, nrow = nrow(snp_freq), ncol = ncol(snp_freq)),
Ne = rep(500,repli), gen = seq(0,60,10), IntGen = TRUE, repl = 1:repli)
#adapted chi square test
mp_val = p.adjust(p_val, method = "BH")
#multiple testing adjustment
mp_pos = which(mp_val < 0.05)
#position of potentially selected SNP
subset_itr = c(subset_itr, length(mp_pos))
subset_itr = c(subset_itr, (benef[[2]][[1]] %in% mp_pos))
snp_freq = snp_freq[mp_pos,]
snp_freq_diff = c()
for (j in 1:repli){
snp_freq_diff = cbind(snp_freq_diff, (snp_freq[,j*7] - snp_freq[,(j-1)*7+1]))
}
#frequency difference
mean_all = rowSums(snp_freq_diff)/repli
#means
df = (repli-1)*nrow(snp_freq_diff)
var = sum((snp_freq_diff - mean_all)^2)/df
#assuming equal variance across SNPs (not true)
#var = rowSums((snp_freq_diff - mean_all)^2)/(repli-1)
#assuming unequal variance across SNPs
###########non-adaptive method##############
integrand = function(arg){
u = arg[1]
x = arg[2]
pnorm(d*u+x)^(nrow(snp_freq_diff)-1)*dnorm(x)*dchi(u*sqrt(df),df)*sqrt(df)
}
statistic = (max(mean_all) - mean_all)*sqrt(nrow(snp_freq_diff))/sqrt(var)
R = c()
for (d in statistic){
R = c(R, 1-pcubature(integrand, lowerLimit = c(0,-Inf), upperLimit = c(Inf, Inf))$integral)
}
subset_itr = c(subset_itr, length(R[R>0.05]))
subset_itr = c(subset_itr, (benef[[2]][[1]] %in% mp_pos[R>0.05]))
############adaptive method###############
k_h = AS(R, 0.5)
df_h = (repli-1)*k_h
integrand_h = function(arg){
u = arg[1]
x = arg[2]
pnorm(d*u+x)^(k_h-1)*dnorm(x)*dchi(u*sqrt(df_h),df_h)*sqrt(df_h)
}
R_h = c()
for (d in statistic){
R_h = c(R_h, 1-pcubature(integrand_h, lowerLimit = c(0,-Inf), upperLimit = c(Inf, Inf))$integral)
}
subset_itr = c(subset_itr, length(R_h[R_h>0.05]))
subset_itr = c(subset_itr, benef[[2]][[1]] %in% mp_pos[R_h>0.05])
############RAS#######################################
k_h = RAS(R, 0.5)
df_h = (repli-1)*k_h
integrand_h = function(arg){
u = arg[1]
x = arg[2]
pnorm(d*u+x)^(k_h-1)*dnorm(x)*dchi(u*sqrt(df_h),df_h)*sqrt(df_h)
}
R_h = c()
for (d in statistic){
R_h = c(R_h, 1-pcubature(integrand_h, lowerLimit = c(0,-Inf), upperLimit = c(Inf, Inf))$integral)
}
subset_itr = c(subset_itr, length(R_h[R_h>0.05]))
subset_itr = c(subset_itr, benef[[2]][[1]] %in% mp_pos[R_h>0.05])
subset_sel = rbind(subset_sel, subset_itr)
}
##########################with replicate scenario###############################
subset_sel = c()
for (i in 1:300){
set.seed(i^2)
print(i)
subset_itr = c()
True_hap <- readRDS("/Users/hchen/Dropbox/Haplotype_test/True_hap.rds")
True_hap = True_hap[,sample.int(180,10)]
while (!any(rowSums(True_hap)==2)){
True_hap = True_hap[,sample(1:180,10)]
}
repli = 3
benef = benef_sim(True_hap, n_benef = 1, min = 0.05, max = 0.05, fix_sel = 2, repli = repli)
hap_freq = Frequency_sim(True_hap, t = 6, tdelta = 10, benef, rand_start = FALSE,
Ne = 500, repli = repli)
snp_freq = True_hap %*% hap_freq[[1]]
#allele frequency matrix
p_val = adapted.cmh.test(snp_freq,matrix(100000, nrow = nrow(snp_freq), ncol = ncol(snp_freq)),
Ne = rep(500,repli), gen = seq(0,60,10), IntGen = TRUE, repl = 1:repli)
#adapted chi square test
mp_val = p.adjust(p_val, method = "BH")
#multiple testing adjustment
mp_pos = which(mp_val < 0.05)
#position of potentially selected SNP
subset_itr = c(subset_itr, length(mp_pos))
subset_itr = c(subset_itr, (benef[[2]][[1]] %in% mp_pos))
snp_freq = snp_freq[mp_pos,]
snp_freq_diff = c()
for (j in 1:repli){
snp_freq_diff = cbind(snp_freq_diff, (snp_freq[,j*7] - snp_freq[,(j-1)*7+1]))
}
#frequency difference
mean_all = rowSums(snp_freq_diff)/repli
#means
df = (repli-1)*nrow(snp_freq_diff)
var = sum((snp_freq_diff - mean_all)^2)/df
#assuming equal variance across SNPs (not true)
#var = rowSums((snp_freq_diff - mean_all)^2)/(repli-1)
#assuming unequal variance across SNPs
###########non-adaptive method##############
integrand = function(arg){
u = arg[1]
x = arg[2]
pnorm(d*u+x)^(nrow(snp_freq_diff)-1)*dnorm(x)*dchi(u*sqrt(df),df)*sqrt(df)
}
statistic = (max(mean_all) - mean_all)*sqrt(nrow(snp_freq_diff))/sqrt(var)
R = c()
for (d in statistic){
R = c(R, 1-pcubature(integrand, lowerLimit = c(0,-Inf), upperLimit = c(Inf, Inf))$integral)
}
subset_itr = c(subset_itr, length(R[R>0.05]))
subset_itr = c(subset_itr, (benef[[2]][[1]] %in% mp_pos[R>0.05]))
############adaptive method###############
k_h = AS(R, 0.5)
df_h = (repli-1)*k_h
integrand_h = function(arg){
u = arg[1]
x = arg[2]
pnorm(d*u+x)^(k_h-1)*dnorm(x)*dchi(u*sqrt(df_h),df_h)*sqrt(df_h)
}
R_h = c()
for (d in statistic){
R_h = c(R_h, 1-pcubature(integrand_h, lowerLimit = c(0,-Inf), upperLimit = c(Inf, Inf))$integral)
}
subset_itr = c(subset_itr, length(R_h[R_h>0.05]))
subset_itr = c(subset_itr, benef[[2]][[1]] %in% mp_pos[R_h>0.05])
############RAS#######################################
k_h = RAS(R, 0.5)
df_h = (repli-1)*k_h
integrand_h = function(arg){
u = arg[1]
x = arg[2]
pnorm(d*u+x)^(k_h-1)*dnorm(x)*dchi(u*sqrt(df_h),df_h)*sqrt(df_h)
}
R_h = c()
for (d in statistic){
R_h = c(R_h, 1-pcubature(integrand_h, lowerLimit = c(0,-Inf), upperLimit = c(Inf, Inf))$integral)
}
subset_itr = c(subset_itr, length(R_h[R_h>0.05]))
subset_itr = c(subset_itr, benef[[2]][[1]] %in% mp_pos[R_h>0.05])
subset_sel = rbind(subset_sel, subset_itr)
}
subset_sel
#Figure7_1, adapted CMH test case
hist(subset_sel[,1], xlab = "size of subset", main = "adapted CMH test", breaks = 20)
